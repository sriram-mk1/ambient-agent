import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// This script requires the following environment variables:
// NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY

async function generateTypes() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    throw new Error('Missing Supabase URL or Anon Key');
  }

  const supabase = createClient(supabaseUrl, supabaseKey);

  // Fetch the database schema
  const { data, error } = await supabase.rpc('get_schema');
  
  if (error) {
    console.error('Error fetching schema:', error);
    process.exit(1);
  }

  // Generate TypeScript types
  const types = `// Generated by generate-types.ts
// Update this file by running: npx tsx scripts/generate-types.ts

export type Database = {
  public: {
    Tables: {
      // Add your table types here
      // Example:
      // profiles: {
      //   Row: { id: string; created_at: string; updated_at: string; user_id: string; }
      //   Insert: { id?: string; created_at?: string; updated_at?: string; user_id: string; }
      //   Update: { id?: string; created_at?: string; updated_at?: string; user_id?: string; }
      // }
    };
  };
};
`;

  // Write the types to a file
  const typesPath = path.join(process.cwd(), 'src/lib/supabase/database.types.ts');
  fs.writeFileSync(typesPath, types);
  
  console.log('Database types generated successfully!');
}

generateTypes().catch(console.error);
